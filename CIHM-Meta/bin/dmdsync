#!/usr/bin/env perl

package SyncDMD;

use strict;
use warnings;
use FindBin;
use lib "$FindBin::RealBin/../lib";
use Getopt::Long;
use Fcntl qw(:DEFAULT :flock);
use Try::Tiny;
use Log::Log4perl;
use File::Find;
use Data::Dumper;
use Digest::MD5;
use JSON;
use Poppler;
use XML::LibXML;
use CIHM::Swift::Client;
use URI::Escape;
use DateTime::Format::ISO8601;
use HTTP::Date qw(:DEFAULT time2isoz);
use File::Path qw(make_path remove_tree);
use File::Spec;
use File::stat;
use XML::LibXML;
use utf8;
use Switch;

{

    package restclient;

    use Moo;
    with 'Role::REST::Client';
}

# There are only 3 valid types of descriptive metadata
my @dmdtypes = ( "issueinfo", "DC", "MARC" );

Log::Log4perl->init_once("/etc/canadiana/tdr/log4perl.conf");
my $logger = Log::Log4perl::get_logger("CIHM::TDR");

sub log_warnings {
    my $warning = shift;
    chomp $warning;

    # Strip wide characters before  trying to log
    ( my $stripped = $warning ) =~ s/[^\x00-\x7f]//g;

    $logger->warn($stripped);
}
local $SIG{__WARN__} = sub { &log_warnings };

my $dmddir = '/crkn-nas-wip/_Metadata_Synchronised';
$dmddir = $ENV{syncdmd_dmddir} if ( exists $ENV{syncdmd_dmddir} );

my $lockfile = '/var/lock/tdr/syncdmd';
$lockfile = $ENV{syncdmd_lockfile} if ( exists $ENV{syncdmd_lockfile} );

my $couchdb_access;
$couchdb_access = $ENV{COUCHDB_ACCESS}
  if ( exists $ENV{COUCHDB_ACCESS} );

$logger->info("Sync DMD: start");

my $swift_server;
$swift_server = $ENV{SWIFT_server} if ( exists $ENV{SWIFT_server} );

my $swift_user;
$swift_user = $ENV{SWIFT_user} if ( exists $ENV{SWIFT_user} );

my $swift_password;
$swift_password = $ENV{SWIFT_password} if ( exists $ENV{SWIFT_password} );

my $swift_account;
$swift_account = $ENV{SWIFT_account} if ( exists $ENV{SWIFT_account} );

my $swift_access_metadata;
$swift_access_metadata = $ENV{SWIFT_access_metadata}
  if ( exists $ENV{SWIFT_access_metadata} );

my $swift_preservation_files;
$swift_preservation_files = $ENV{SWIFT_preservation_files}
  if ( exists $ENV{SWIFT_preservation_files} );

my $retries = 10;

#Change order.  For running a second instance.
my $reverse;

# Markers for Preservatin and Access
my $pmarker;
my $amarker;

# Skip Preservation and Access
my $pskip;
my $askip;

# Limit for containeropt
my $limit = 10000;
GetOptions(
    'lockfile:s'                 => \$lockfile,
    'dmddir:s'                   => \$dmddir,
    'swift_server:s'             => \$swift_server,
    'swift_user:s'               => \$swift_user,
    'swift_password:s'           => \$swift_password,
    'swift_account:s'            => \$swift_account,
    'swift_access_metadata:s'    => \$swift_access_metadata,
    'swift_preservation_files:s' => \$swift_preservation_files,
    'retries:i'                  => \$retries,
    'reverse'                    => \$reverse,
    'limit:i'                    => \$limit,
    'amarker:s'                  => \$amarker,
    'pmarker:s'                  => \$pmarker,
    'askip'                      => \$askip,
    'pskip'                      => \$pskip,
    'couchdb_access:s'           => \$couchdb_access,

);

# Only allow one instance to run at a time..
sysopen( FH, $lockfile, O_WRONLY | O_CREAT )
  or die "can't open lockfile=$lockfile: $!\n";
flock( FH, LOCK_EX | LOCK_NB )
  or exit 0;

die "couchdb_access is mandatory (environment or parameter)\n"
  if ( !$couchdb_access );
$couchdb_access = noEndSlash($couchdb_access);

# Create both parent directories...
my $accessdir       = File::Spec->catfile( $dmddir, 'access' );
my $preservationdir = File::Spec->catfile( $dmddir, 'preservation' );

my @pathdir = make_path( $accessdir, $preservationdir );
die "Didn't create $accessdir\n"       if ( !-d $accessdir );
die "Didn't create $preservationdir\n" if ( !-d $preservationdir );

# Used to show a different processname during processing
my $syncdmdprog = $0;

my %swiftopt = (
    furl_options => { timeout => 3600 },

    server   => $swift_server,
    user     => $swift_user,
    password => $swift_password,
    account  => $swift_account,

);
my $swift = CIHM::Swift::Client->new(%swiftopt);

die "Missing `swift_access_metadata`" if !defined $swift_access_metadata;
my $test = $swift->container_head($swift_access_metadata);
if ( !$test || $test->code != 204 ) {
    die
"Problem connecting to Swift container:$swift_access_metadata . Check configuration\n";
}

die "Missing `swift_preservation_files`" if !defined $swift_preservation_files;
$test = $swift->container_head($swift_preservation_files);
if ( !$test || $test->code != 204 ) {
    die
"Problem connecting to Swift container:$swift_preservation_files . Check configuration\n";
}

my $accessdb = new restclient(
    server      => $couchdb_access,
    type        => 'application/json',
    clientattrs => { timeout => 3600 },
);
$accessdb->set_persistent_header( 'Accept' => 'application/json' );
$test = $accessdb->head("/");
if ( !$test || $test->code != 200 ) {
    die
      "Problem connecting to `access` Couchdb database. Check configuration\n";
}

if ( !$pskip ) {
    scan_preservation();
}
if ( !$askip ) {
    scan_access();
}
$logger->info("Sync DMD: done");

sub scan_preservation {
    $logger->info("Scan Preservation...");

    my %containeropt = (
        delimiter => '/',
        limit     => $limit,
        marker    => $pmarker
    );

    my %preservationfiles;

  prescontainer: do {

        my $tries = $retries;
        my $dataresp;
      prescontainerget: {
            do {
                $dataresp =
                  $swift->container_get( $swift_preservation_files,
                    \%containeropt );
                if ( $dataresp->code == 200 ) {
                    last prescontainerget;
                }
                else {
                    $tries--;
                    warn "container_get("
                      . $swift_preservation_files
                      . ") returned "
                      . $dataresp->code . " - "
                      . $dataresp->message
                      . " (retries=$tries)\n";
                }
            } until ( !$tries );

            if ( !$tries ) {
                die "No more retries\n";
            }
        }
        undef $containeropt{'marker'};
        my $count = scalar( @{ $dataresp->content } );
        if ( $count && $count == $limit ) {
            if ( defined $dataresp->content->[ $count - 1 ]->{name} ) {
                $containeropt{'marker'} =
                  $dataresp->content->[ $count - 1 ]->{name};
            }
            else {
                $containeropt{'marker'} =
                  $dataresp->content->[ $count - 1 ]->{subdir};
            }
        }
        foreach my $object ( @{ $dataresp->content } ) {
            my $subdir = $object->{subdir};
            if ($subdir) {
                my $object = $subdir . "data/sip/data/metadata.xml";
                $0 = $syncdmdprog . " looking at $object";

                my $tries = $retries;
                my $resp;
              presobjhead: {
                    do {
                        $resp =
                          $swift->object_head( $swift_preservation_files,
                            $object );
                        if ( $resp->code == 200 ) {
                            last presobjhead;
                        }
                        else {
                            $tries--;
                            warn "object_head ("
                              . $swift_preservation_files . " , "
                              . $object
                              . ") returned "
                              . $resp->code . " - "
                              . $resp->message
                              . " (retries=$tries)\n";
                        }
                    } until ( !$tries );

                    if ( !$tries ) {
                        die "No more retries\n";
                    }
                }
                my $lastmodified = $resp->headers->header('last-modified');
                if ($lastmodified) {
                    my $time  = str2time($lastmodified);
                    my $aipid = $subdir;
                    $aipid =~ s|/+||;

                    my @foundpaths;
                  TYPE: foreach my $type (@dmdtypes) {
                        my $path = pathID( $preservationdir, $aipid, $type );

                        if ( !$pmarker ) {
                            $preservationfiles{$path} = 1;
                        }
                        my $st = stat($path);
                        next TYPE if !$st;

                        push @foundpaths, ( $st->mtime == $time );
                    }

           # If there are no files, more than 1 files, or the date didn't match.
                    if (   scalar(@foundpaths) == 0
                        || scalar(@foundpaths) > 1
                        || !( $foundpaths[0] ) )
                    {
                        getMETS( $aipid, $time, $object );
                    }
                }
                else {
                    warn("No last modified for $object\n");
                }
            }
            else {
                warn( "No {subdir} in: \n" . Dumper($object) . "\n" );
            }
        }
    } until ( !defined $containeropt{'marker'} );

    if ( !$pmarker ) {
        scan_filesystem( $preservationdir, \%preservationfiles );
    }
}

sub scan_access {
    $logger->info("Scan Access...");

    my $url   = '/_find';
    my $query = {
        "fields" => [ "_id", "slug", "dmdType" ],
        "limit"  => $limit
    };

    if ($amarker) {
        $query->{'selector'} = { "slug" => { '$gte' => $amarker } };
    }
    else {
        $query->{'selector'} = {};
    }

    if ($reverse) {
        $query->{'sort'} = [ { 'slug' => 'desc' } ];
    }
    else {
        $query->{'sort'} = [ { 'slug' => 'asc' } ];
    }

    my $bookmark;
    my %accessfiles;

    do {
        my $res =
          $accessdb->post( $url, $query,
            { deserializer => 'application/json' } );

        if ( $res->code != 200 ) {
            if ( defined $res->response->content ) {
                warn $res->response->content . "\n";
            }
            die "$url returned " . $res->code . "\n";
        }

        my @deldocs;
        if ( defined $res->data->{'warning'}
            && $res->data->{'warning'} ne
            'No matching index found, create an index to optimize query time.' )
        {
            warn $res->data->{'warning'} . "\n";
        }

        # https://docs.couchdb.org/en/stable/api/database/find.html#pagination
        $bookmark = $res->data->{'bookmark'};
        undef $bookmark
          if ( ( scalar @{ $res->data->{docs} } < $query->{'limit'} )
            || ( defined $bookmark && ( $bookmark eq 'nil' ) ) );
        $query->{'bookmark'} = $bookmark;

      ACCESSOBJECT: foreach my $row ( @{ $res->data->{docs} } ) {
            my $noid    = $row->{'_id'};
            my $slug    = $row->{'slug'};
            my $dmdType = $row->{'dmdType'};

            if ($dmdType) {
                $dmdType = uc($dmdType);

                # To match case for preservation
                my $type = $dmdType;
                $type = lc($type) if ( $type eq 'ISSUEINFO' );
                my $path = pathID( $accessdir, $slug, $type );

                if ( !$amarker ) {
                    $accessfiles{$path} = 1;
                }
                my $object = $noid . '/dmd' . $dmdType . '.xml';
                $0 = $syncdmdprog . " HEAD $object ($slug)";

                my $tries = $retries;
                my $r;
              accessobjhead:
                {
                    do {
                        $r =
                          $swift->object_head( $swift_access_metadata,
                            $object );

                        if ( $r->code == 404 ) {
                            log_warnings("$object not found");
                            last accessobjhead;
                        }
                        elsif ( $r->code == 200 ) {
                            my $lastmodified =
                              $r->headers->header('last-modified');
                            if ($lastmodified) {
                                my $time = str2time($lastmodified);

           # The all important "don't download/write again if it hasn't changed"
                                my $st = stat($path);
                                next ACCESSOBJECT
                                  if ( $st && $st->mtime == $time );

                                $0 = $syncdmdprog . " GET $object ($slug)";

                                my $tries = $retries;
                                my $resp;
                              accessobjget: {
                                    do {
                                        $resp =
                                          $swift->object_get(
                                            $swift_access_metadata, $object );
                                        if ( $resp->code == 200 ) {
                                            last accessobjget;
                                        }
                                        else {
                                            $tries--;
                                            warn "object_get ("
                                              . $swift_access_metadata . " , "
                                              . $object
                                              . ") returned "
                                              . $resp->code . " - "
                                              . $resp->message
                                              . " (retries=$tries)\n";
                                        }
                                    } until ( !$tries );

                                    if ( !$tries ) {
                                        die "No more retries\n";
                                    }
                                }

                                storeDMD( $accessdir, $slug, $time, $type,
                                    $resp->content );
                            }
                            else {
                                log_warnings(
"Head of $object ($slug) didn't have a last-modified header"
                                );
                            }
                            last accessobjhead;
                        }
                        else {
                            if ( defined $r->_fr->content ) {
                                warn $r->_fr->content . "\n";
                            }
                            $tries--;
                            warn "Head for $object ($slug) - returned "
                              . $r->code
                              . " (retries=$tries)\n";
                        }

                    } until ( !$tries );

                    if ( !$tries ) {
                        die "No more retries\n";
                    }
                }
            }
            else {
                warn("No metadata for $noid($slug)\n");
            }
        }
    } until ( !$bookmark );

    if ( !$amarker ) {
        scan_filesystem( $accessdir, \%accessfiles );
    }
}

sub scan_filesystem {
    my ( $basepath, $storedfiles ) = @_;

    my @tounlink;

    # Needed to match up variable scoping -- didn't want global for $storedfiles
    my $matching_dmd_file = sub {
        if ( -f $_ ) {
            $0 = $syncdmdprog . " scanning in $File::Find::dir";

            if ( !( exists $storedfiles->{$File::Find::name} ) ) {
                push @tounlink, $File::Find::name;
            }
        }
    };
    find( $matching_dmd_file, $basepath );

    foreach my $unlinkfile (@tounlink) {
        $logger->info("unlinking $unlinkfile");
        unlink $unlinkfile;
    }
}

sub getMETS {
    my ( $aipid, $time, $object ) = @_;

    $0 = $syncdmdprog . " getMETS $object";

    my $tries = $retries;
    my $resp;
  getmetsdo: {
        do {
            $resp = $swift->object_get( $swift_preservation_files, $object );
            if ( $resp->code == 200 ) {
                last getmetsdo;
            }
            else {
                $tries--;
                warn "object_get ("
                  . $swift_preservation_files . " , "
                  . $object
                  . ") returned "
                  . $resp->code . " - "
                  . $resp->message
                  . " (retries=$tries)\n";
            }
        } until ( !$tries );

        if ( !$tries ) {
            die "No more retries\n";
        }
    }
    my $xml = XML::LibXML->new->parse_string( $resp->content );
    my $xpc = XML::LibXML::XPathContext->new;
    $xpc->registerNs( 'mets',  "http://www.loc.gov/METS/" );
    $xpc->registerNs( 'xlink', "http://www.w3.org/1999/xlink" );

    my @nodes =
      $xpc->findnodes( "descendant::mets:structMap[\@TYPE=\"physical\"]",
        $xml );
    if ( scalar(@nodes) != 1 ) {
        die "Found " . scalar(@nodes) . " structMap(TYPE=physical)\n";
    }
    my @divs = $xpc->findnodes( 'descendant::mets:div', $nodes[0] );
    if (@divs) {
        my $div  = $divs[0];
        my $type = $div->getAttribute('TYPE');
        if (   ( $type ne 'document' )
            && ( $type ne 'issue' )
            && ( $type ne 'series' ) )
        {
            die
              "First DIV of METS isn't type=document|issue| , but type=$type\n";
        }
        my $dmdid = $div->getAttribute('DMDID');
        if ($dmdid) {
            my @dmdsec =
              $xpc->findnodes( "descendant::mets:dmdSec[\@ID=\"$dmdid\"]",
                $xml );
            if ( scalar(@dmdsec) != 1 ) {
                die "Found " . scalar(@dmdsec) . " dmdSec for ID=$dmdid\n";
            }
            my @md = $dmdsec[0]->nonBlankChildNodes();
            if ( scalar(@md) != 1 ) {
                die "Found " . scalar(@md) . " children for dmdSec ID=$dmdid\n";
            }
            my @types = split( /:/, $md[0]->nodeName );
            my $type = pop(@types);

            my $mdtype = $md[0]->getAttribute('MDTYPE');
            if ( $mdtype eq 'OTHER' ) {
                $mdtype = $md[0]->getAttribute('OTHERMDTYPE');
            }
            my @mdrecords = $md[0]->nonBlankChildNodes();
            my @records   = $mdrecords[0]->nonBlankChildNodes();
            my $xmlrecord = $records[0]->toString(0);

            storeDMD( $preservationdir, $aipid, $time, $mdtype, $xmlrecord )

        }
    }
    else {
        die "No DIVS in METS for $aipid\n";
    }

}

sub pathID {
    my ( $basepath, $id, $type ) = @_;

    # Create a full path based on ID
    my $idpath;
    switch ($id) {
        case m/^ams\./        { $idpath = 'ams'; }
        case m/^carl\./       { $idpath = 'carl'; }
        case m/^numeris\./    { $idpath = 'numeris'; }
        case m/^omcn\./       { $idpath = 'omcn'; }
        case m/^oocihm\.lac_/ { $idpath = 'oocihm.lac'; }
        case m/^oocihm\.N_/   { $idpath = 'oocihm.N'; }
        case m/^oocihm\./     { $idpath = 'oocihm'; }
        case m/^ooe\./        { $idpath = 'ooe'; }
        case m/^ooga\./       { $idpath = 'ooga'; }
        case m/^oop\./        { $idpath = 'oop'; }
        case m/^osmsdga\./    { $idpath = 'osmsdga'; }
        case m/^qmma\./       { $idpath = 'qmma'; }
        case m/^sru\./        { $idpath = 'sru'; }
        else                  { $idpath = 'default'; }
    }

    my $path =
      File::Spec->catfile( $basepath, $idpath, $id . "-" . $type . ".xml" );
    return $path;

}

sub storeDMD {
    my ( $basepath, $id, $time, $type, $xml ) = @_;

    my $path = pathID( $basepath, $id, $type );

    my ( $volume, $directories, $file ) = File::Spec->splitpath($path);
    make_path($directories);

    $0 = $syncdmdprog . " storeDMD $id";

    # Clear any existing files first, in case type changed.
    foreach my $dmdtype (@dmdtypes) {
        my $temppath = pathID( $basepath, $id, $dmdtype );
        my $st = stat($temppath);
        next if !$st;
        unlink $temppath;
    }

    open( my $fh, '>:encoding(UTF-8)', $path )
      or die "Could not open file '$path' $!";

    print $fh $xml;
    close $fh;

    my $atime = time;
    utime $atime, $time, $path;

    $logger->info( "$path = " . time2isoz($time) );

}

sub noEndSlash {
    my ($url) = @_;

    $url =~ s|/*$||;
    return $url;
}
