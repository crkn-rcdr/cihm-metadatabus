#!/usr/bin/env perl

use strict;
use warnings;
use FindBin;
use lib "$FindBin::RealBin/../lib";
use Getopt::Long;
use Fcntl qw(:DEFAULT :flock);
use Try::Tiny;
use Log::Log4perl;
use File::Find;
use Data::Dumper;
use Digest::MD5;
use JSON;
use Poppler;
use XML::LibXML;
use CIHM::Swift::Client;
use URI::Escape;
use DateTime::Format::ISO8601;

{

    package restclient;

    use Moo;
    with 'Role::REST::Client';
}

Log::Log4perl->init_once("/etc/canadiana/tdr/log4perl.conf");
my $logger = Log::Log4perl::get_logger("CIHM::TDR");

my $lockfile = '/var/lock/tdr/ocrload';
$lockfile = $ENV{ocrload_lockfile} if ( exists $ENV{ocrload_lockfile} );

$logger->info("OcrLoad");

my $swift_server;
$swift_server = $ENV{SWIFT_server} if ( exists $ENV{SWIFT_server} );

my $swift_user;
$swift_user = $ENV{SWIFT_user} if ( exists $ENV{SWIFT_user} );

my $swift_password;
$swift_password = $ENV{SWIFT_password} if ( exists $ENV{SWIFT_password} );

my $swift_account;
$swift_account = $ENV{SWIFT_account} if ( exists $ENV{SWIFT_account} );

my $swift_access_metadata;
$swift_access_metadata = $ENV{SWIFT_access_metadata}
  if ( exists $ENV{SWIFT_access_metadata} );

my $swift_access_files;
$swift_access_files = $ENV{SWIFT_access_files}
  if ( exists $ENV{SWIFT_access_files} );

my $couchdb_canvas;
$couchdb_canvas = $ENV{COUCHDB_CANVAS} if ( exists $ENV{COUCHDB_CANVAS} );

my $couchdb_access;
$couchdb_access = $ENV{COUCHDB_ACCESS} if ( exists $ENV{COUCHDB_ACCESS} );

GetOptions(
    'couchdb_access:s'        => \$couchdb_access,
    'couchdb_canvas:s'        => \$couchdb_canvas,
    'lockfile:s'              => \$lockfile,
    'swift_server:s'          => \$swift_server,
    'swift_user:s'            => \$swift_user,
    'swift_password:s'        => \$swift_password,
    'swift_account:s'         => \$swift_account,
    'swift_access_metadata:s' => \$swift_access_metadata,
    'swift_access_files:s'    => \$swift_access_files,
);

# Only allow one instance to run at a time..
sysopen( FH, $lockfile, O_WRONLY | O_CREAT )
  or die "can't open lockfile=$lockfile: $!\n";
flock( FH, LOCK_EX | LOCK_NB )
  or exit 0;

sub noEndSlash {
    my ($url) = @_;

    $url =~ s|/*$||;
    return $url;
}

die "couchdb_canvas is mandatory (environment or parameter)\n"
  if ( !$couchdb_canvas );
$couchdb_canvas = noEndSlash($couchdb_canvas);

my $canvasdb = new restclient(
    server      => $couchdb_canvas,
    type        => 'application/json',
    clientattrs => { timeout => 3600 },
);
$canvasdb->set_persistent_header( 'Accept' => 'application/json' );
my $test = $canvasdb->head("/");
if ( !$test || $test->code != 200 ) {
    die
      "Problem connecting to `canvas` Couchdb database. Check configuration\n";
}

die "couchdb_access is mandatory (environment or parameter)\n"
  if ( !$couchdb_access );
$couchdb_access = noEndSlash($couchdb_access);

my $accessdb = new restclient(
    server      => $couchdb_access,
    type        => 'application/json',
    clientattrs => { timeout => 3600 },
);
$accessdb->set_persistent_header( 'Accept' => 'application/json' );
$test = $accessdb->head("/");
if ( !$test || $test->code != 200 ) {
    die
      "Problem connecting to `access` Couchdb database. Check configuration\n";
}

my %swiftopt = (
    furl_options => { timeout => 3600 },

    server   => $swift_server,
    user     => $swift_user,
    password => $swift_password,
    account  => $swift_account,

);
my $swift = CIHM::Swift::Client->new(%swiftopt);

$test = $swift->container_head($swift_access_files);
if ( !$test || $test->code != 204 ) {
    die "Problem connecting to Swift container. Check configuration\n";
}

=pod
# Used to scan directory -- takes time because there are many files

my $basepath = "/home/tdr/ocr-todo/_Russell_Ingest";

find(\&matching_aip_dir, $basepath);


sub matching_aip_dir {
    if (-d $_) {
        print $File::Find::name . "\n";
    }
}
=cut

my $ocrdirs = <<OCRDIRS;
/home/tdr/ocr-todo/_Russell_Ingest/Batch 500 - Heritage - completed/lac_reel_t15869
/home/tdr/ocr-todo/_Russell_Ingest/Batch 500 - Heritage - completed/lac_reel_t15870
/home/tdr/ocr-todo/_Russell_Ingest/Batch 500 - Heritage - completed/lac_reel_t15867
/home/tdr/ocr-todo/_Russell_Ingest/Batch 500 - Heritage - completed/lac_reel_t15868
/home/tdr/ocr-todo/_Russell_Ingest/Batch 475 - heritage - done - verified/lac_reel_t15796
/home/tdr/ocr-todo/_Russell_Ingest/Batch 475 - heritage - done - verified/lac_reel_t15797
/home/tdr/ocr-todo/_Russell_Ingest/Batch 475 - heritage - done - verified/lac_reel_t15795
/home/tdr/ocr-todo/_Russell_Ingest/Batch 477 - Heritage - completed/lac_reel_t15596
/home/tdr/ocr-todo/_Russell_Ingest/Batch 477 - Heritage - completed - verified/lac_reel_t15596
/home/tdr/ocr-todo/_Russell_Ingest/Batch 480 - Heritage - completed/lac_reel_t15808
/home/tdr/ocr-todo/_Russell_Ingest/Batch 480 - Heritage - completed/lac_reel_t15809
/home/tdr/ocr-todo/_Russell_Ingest/Batch 480 - Heritage - completed/lac_reel_t15807
/home/tdr/ocr-todo/_Russell_Ingest/Batch 480 - Heritage - completed/lac_reel_t15663
/home/tdr/ocr-todo/_Russell_Ingest/Batch 482 - Heritage - completed/lac_reel_t15815
/home/tdr/ocr-todo/_Russell_Ingest/Batch 488 - Heritage - completed - verified/lac_reel_t15832
/home/tdr/ocr-todo/_Russell_Ingest/Batch 488 - Heritage - completed - verified/lac_reel_t15833
/home/tdr/ocr-todo/_Russell_Ingest/Batch 488 - Heritage - completed - verified/lac_reel_t15831
/home/tdr/ocr-todo/_Russell_Ingest/Batch 490 - Heritage - completed - verified/lac_reel_t15838
/home/tdr/ocr-todo/_Russell_Ingest/Batch 490 - Heritage - completed - verified/lac_reel_t15839
/home/tdr/ocr-todo/_Russell_Ingest/Batch 490 - Heritage - completed - verified/lac_reel_t15837
/home/tdr/ocr-todo/_Russell_Ingest/Batch 486 - Heritage/lac_reel_t15826
/home/tdr/ocr-todo/_Russell_Ingest/Batch 486 - Heritage/lac_reel_t15827
/home/tdr/ocr-todo/_Russell_Ingest/Batch 486 - Heritage/lac_reel_t15825
/home/tdr/ocr-todo/_Russell_Ingest/Batch 487 - Heritage/lac_reel_t15829
/home/tdr/ocr-todo/_Russell_Ingest/Batch 487 - Heritage/lac_reel_t15830
/home/tdr/ocr-todo/_Russell_Ingest/Batch 487 - Heritage/lac_reel_t15828
OCRDIRS

my @ocrdirs = split "\n", $ocrdirs;

my @idlookup;
foreach my $ocrdir (@ocrdirs) {
    my @temp = split '/', $ocrdir;
    my $id = "oocihm." . pop @temp;

    print "Processing: $ocrdir  (ID=$id)\n";

    my @canvasnoids;
    my @updatedcanvases;

    opendir( my $dh, $ocrdir ) || die "Can't open directory $ocrdir: $!\n";

    while ( readdir $dh ) {
        next if ( !-f "$ocrdir/$_" );
        next if /\.(xml|pdf|)$/;

        #print "$ocrdir/$_\n";

        my $imagefilename = "$ocrdir/$_";
        my $basename      = $imagefilename;
        $basename =~ s/\.(jpg|tif|jp2)$//;
        my $xmlfilename = $basename . ".xml";
        my $pdffilename = $basename . ".pdf";

        #print "Basename=$basename\n";

        if ( !-f $pdffilename ) {
            warn "Missing PDF: $pdffilename\n";
            next;
        }
        if ( !-f $xmlfilename ) {
            warn "Missing XML: $xmlfilename\n";
            next;
        }

        my $cihmsource = $id . "/data/sip/data/files/$_";
        open( my $fh, '<:raw', $imagefilename )
          or die "Can't open '$imagefilename': $!";
        binmode($fh);
        my $size = ( stat($fh) )[7];

        my $md5digest = Digest::MD5->new->addfile($fh)->hexdigest;
        close $fh;

        # Look up existing canvases.
        my $res = $canvasdb->post(
            "/_design/access/_view/cihmsource?reduce=false&include_docs=true",
            { keys => [ [ $cihmsource, $size, $md5digest ] ] },
            { deserializer => 'application/json' }
        );
        if ( $res->code != 200 ) {
            if ( defined $res->response->content ) {
                warn $res->response->content . "\n";
            }
            die "lookup in cihmsource return code: " . $res->code . "\n";
        }
        my $canvas = $res->data->{rows}->[0]->{doc};

        if ( !$canvas ) {
            warn
              "not found: cihmsource: $cihmsource  size:$size md5:$md5digest\n";
            next;
        }

        if ( scalar( @{ $res->data->{rows} } ) > 1 ) {
            warn
"Multiple Noids match! cihmsource: $cihmsource  size:$size md5:$md5digest\n";
        }

        # We will want to force update of any slug that references this canvas.
        push @canvasnoids, $canvas->{'_id'};

        # Indicator whether the $canvas changed.
        my $changed;

        # Only do a few when debugging....
        #if ( scalar(@canvasnoids) > 10 ) {
        #    last;
        #}

        # Validate the PDF
        my $pages = 0;
        try {
            my $pdf = Poppler::Document->new_from_file($pdffilename);
            $pages = $pdf->get_n_pages;
        };
        if ( $pages == 1 ) {

            my $upload = updateFile( "pdf", $canvas->{'_id'}, $pdffilename );

            $canvas->{'ocrPdf'} = {
                size      => $upload->{size},
                extension => 'pdf',
                md5       => $upload->{md5digest}
            };
            $changed = 1;
        }
        else {
            warn "$pdffilename is not a single page PDF\n";
        }

        # Validate the XML
        my $valid = 1;
        try {
            my $xml = XML::LibXML->new->parse_file($xmlfilename);
            my $xpc = XML::LibXML::XPathContext->new($xml);
            $xpc->registerNs( 'alto',
                'http://www.loc.gov/standards/alto/ns-v3' );
            my $schema =
              XML::LibXML::Schema->new(
                location => "/opt/xml/current/unpublished/xsd/alto-3-1.xsd" );
            $schema->validate($xml);
        }
        catch {
            $valid = 0;
            warn "$xmlfilename is not valid ALTO XML: $_\n";
        };
        if ($valid) {
            updateFile( "ocrALTO.xml", $canvas->{'_id'}, $xmlfilename );

            # Delete any redundant txtmap
            $swift->object_delete( $swift_access_metadata,
                $canvas->{'_id'} . "/ocrTXTMAP.xml" );

            $canvas->{'ocrType'} = 'alto';
            $changed = 1;

            # Will do the upload....
        }

        #print "cihmsource: $cihmsource  size:$size md5:$md5digest\n"
        #  . Dumper($doc) . "\n";

        if ($changed) {
            push @updatedcanvases, $canvas;
        }
    }
    closedir $dh;

    print "Updating " . scalar(@updatedcanvases) . " canvases.\n";

    # Update any potentially changed Canvases.
    if (@updatedcanvases) {
        my $res = $canvasdb->post(
            "/_bulk_docs",
            { docs         => \@updatedcanvases },
            { deserializer => 'application/json' }
        );
        if ( $res->code != 201 ) {
            if ( defined $res->response->content ) {
                warn $res->response->content . "\n";
            }
            die "dbupdate of updated canvases return code: "
              . $res->code . "\n";
        }
    }

    if ( !@canvasnoids ) {
        warn "No canvases found -- are the images in the directory?\n";
        next;
    }

    # Look up what manifests these canvases are in
    my $url = "/_design/noid/_view/canvasnoids?reduce=false";
    my $res = $accessdb->post(
        $url,
        { keys         => \@canvasnoids },
        { deserializer => 'application/json' }
    );
    if ( $res->code != 200 ) {
        if ( defined $res->response->content ) {
            warn $res->response->content . "\n";
        }
        die "lookup in canvasnoids return code: " . $res->code . "\n";
    }

    my %foundaccess;
    foreach my $accessdoc ( @{ $res->data->{rows} } ) {
        $foundaccess{ $accessdoc->{id} } = 1;
    }

    my @manifestnoids = keys %foundaccess;

    if (@manifestnoids) {

        # Look up what manifests these canvases are in
        $url = "/_all_docs";
        $res = $accessdb->post(
            $url,
            { keys         => \@manifestnoids, include_docs => JSON::true },
            { deserializer => 'application/json' }
        );
        if ( $res->code != 200 ) {
            if ( defined $res->response->content ) {
                warn $res->response->content . "\n";
            }
            die "lookup in canvasnoids return code: " . $res->code . "\n";
        }

        my @slugs;
        foreach my $accessdoc ( @{ $res->data->{rows} } ) {
            push @slugs, $accessdoc->{doc}->{slug};
        }

        if (@slugs) {
            print "Slugs of Manifests: " . join( ' , ', sort (@slugs) ) . "\n";
        }
        else {
            print "Noids of Manifests: "
              . join( ' , ', sort (@manifestnoids) ) . "\n";
        }

        # And force those manifests to be processed
        foreach my $accessid (@manifestnoids) {
            my $url =
              "/_design/access/_update/forceUpdate/" . uri_escape($accessid);
            my $res = $accessdb->post( $url, {},
                { deserializer => 'application/json' } );
            if ( $res->code != 201 ) {
                if ( defined $res->response->content ) {
                    warn $res->response->content . "\n";
                }
                warn "Attempt to force update for $accessid : "
                  . $res->code . "\n";
            }
            else {
                $logger->info("Update forced for noid=$accessid");
            }
        }

    }
    else {
        print "Canvases not found in any manifest!\n";
    }
}

sub updateFile {
    my ( $type, $id, $filename ) = @_;

    open( my $fh, '<:raw', $filename )
      or die "Can't open '$filename': $!";
    binmode($fh);
    my $filedate = "unknown";
    my $mtime    = ( stat($fh) )[9];
    if ($mtime) {
        my $dt = DateTime->from_epoch( epoch => $mtime );
        $filedate = $dt->datetime . "Z";
    }
    my $size = ( stat($fh) )[7];

    my $md5digest = Digest::MD5->new->addfile($fh)->hexdigest;
    seek( $fh, 0, 0 );

    # Currently only 'pdf' and 'ocrALTO.xml' exist.
    my $container;
    my $object;
    if ( $type eq 'pdf' ) {
        $container = $swift_access_files;
        $object    = $id . ".pdf";
    }
    else {
        $container = $swift_access_metadata;
        $object    = $id . "/ocrALTO.xml";
    }

    my $res = $swift->object_head( $container, $object );

    if ( $res->code == 200 ) {
        if (   ( int( $res->header('Content-Length') ) == $size )
            && ( $res->etag eq $md5digest ) )
        {
            # Don't send, as it is already there
            return { size => $size, md5digest => $md5digest };
        }
    }
    elsif ( $res->code == 404 ) {

        # Not found means always send

    }
    else {
        die "updateFile container: '$container' , object: '$object'  returned "
          . $res->code . " - "
          . $res->message . "\n";
    }

    # Send file.
    my $putresp =
      $swift->object_put( $container, $object, $fh,
        { 'File-Modified' => $filedate } );
    if ( $putresp->code != 201 ) {
        die(    "object_put of $object into $container returned "
              . $putresp->code . " - "
              . $putresp->message
              . "\n" );
    }
    close $fh;

    # Extra check that everything was OK.
    warn "MD5 mismatch object_put($container): $filename=$md5digest $object="
      . $putresp->etag
      . " during "
      . $putresp->transaction_id . "\n"
      if $md5digest ne $putresp->etag;

    return { size => $size, md5digest => $md5digest };
}
