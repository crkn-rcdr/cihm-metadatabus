#!/usr/bin/env perl

use strict;
use utf8;
use warnings;
use Getopt::Long;
use URI::Escape;
use Data::Dumper;
use JSON;


{
    package restclient;

    use Moo;
    with 'Role::REST::Client';
}


my $limit = 10000;
my $quiet;
my $startkey;

my $couchdb_access;
$couchdb_access = $ENV{COUCHDB_ACCESS} if ( exists $ENV{COUCHDB_ACCESS} );

my $couchdb_canvas;
$couchdb_canvas = $ENV{COUCHDB_CANVAS} if ( exists $ENV{COUCHDB_CANVAS} );

GetOptions(
    'startkey=s'       => \$startkey,
    'limit=i'          => \$limit,
    'quiet'            => \$quiet,
    'couchdb_canvas:s' => \$couchdb_canvas,
    'couchdb_access:s' => \$couchdb_access,
);

die "couchdb_access is mandatory (environment or parameter)\n"
  if ( !$couchdb_access );
$couchdb_access = noEndSlash($couchdb_access);

die "couchdb_canvas is mandatory (environment or parameter)\n"
  if ( !$couchdb_canvas );
$couchdb_canvas = noEndSlash($couchdb_canvas);

my $accessdb = restclient->new(
    server      => $couchdb_access,
    type        => 'application/json',
    clientattrs => { timeout => 36000 },
);
$accessdb->set_persistent_header( 'Accept' => 'application/json' );
$accessdb->type("application/json");

my $canvasdb = restclient->new(
    server      => $couchdb_canvas,
    type        => 'application/json',
    clientattrs => { timeout => 36000 },
);
$canvasdb->set_persistent_header( 'Accept' => 'application/json' );
$canvasdb->type("application/json");

my $count = 1;
while ($count) {
    my $request =
        "/_all_docs?include_docs=true"
      . ( $startkey ? "&startkey=\"" . uri_escape_utf8($startkey) . "\"" : "" )
      . "&limit=$limit";
    my $res =
      $canvasdb->get( $request, {}, { deserializer => 'application/json' } );
    if ( $res->code != 200 ) {
        die "CouchDB: \"$request\" return code: " . $res->code . "\n";
    }
    my $rows = $res->data->{rows};
    $count = scalar @{$rows};
    print "Count: $count\n" if ( !$quiet );
    if ( $count > 0 ) {
        my @updates;
        my $firstkey = $rows->[0]->{'id'};
        my $lastcount;
        if ( $count > 1 ) {
            $lastcount = $count - 2;
            $startkey  = $rows->[ $count - 1 ]->{'id'};
        }
        else {
            # Do the last one
            $count     = 0;
            $lastcount = 0;
        }
        my @canvaskeys;
        for my $i ( 0 .. $lastcount ) {
            push @canvaskeys, $rows->[$i]->{'id'};
        }
        my $requestman = "/_design/noid/_view/canvasnoids";
        my $resman     = $accessdb->post(
            $requestman,
            {
                keys => \@canvaskeys
            },
            { deserializer => 'application/json' }
        );
        if ( $resman->code != 200 ) {
            die "CouchDB: \"$requestman\" return code: " . $resman->code . "\n";
        }

        # Create hash from found entries
        my %canvasfound = map { $_->{key} => 1 } @{ $resman->data->{rows} };
        for my $i ( 0 .. $lastcount ) {
            my $doc = $rows->[$i]->{doc};
            my $id  = $doc->{'_id'};

            # Skip _design and related documents
            next if substr( $id, 0, 1 ) eq '_';

            my $orphan = !exists $canvasfound{$id};

            # Is orphan, but not currently set
            if ( $orphan
                && ( !( exists $doc->{orphan} ) || !( $doc->{orphan} ) ) )
            {
                print "$id is orphan, and needs updating\n" if ( !$quiet );
                $doc->{orphan} = JSON::true;
                push @updates, $doc;
            }
            if ( !$orphan && exists $doc->{orphan} && $doc->{orphan} ) {
                print "$id not orphan, and needs updating\n" if ( !$quiet );
                $doc->{orphan} = JSON::false;
                push @updates, $doc;
            }
        }

        if (@updates) {
            my $res = $canvasdb->post(
                "/_bulk_docs",
                { docs         => \@updates },
                { deserializer => 'application/json' }
            );
            if ( $res->code != 201 ) {
                if ( defined $res->response->content ) {
                    warn $res->response->content . "\n";
                }
                die "dbupdate of 'canvas' return code: " . $res->code . "\n";
            }
        }
        my $lastkey = $rows->[$lastcount]->{'id'};
        print "FirstKey: $firstkey LastKey: $lastkey StartKey: $startkey \n"
          if ( !$quiet );
    }
}



sub noEndSlash {
    my ($url) = @_;

    $url =~ s|/*$||;
    return $url;
}
